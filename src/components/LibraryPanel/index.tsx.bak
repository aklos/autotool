import React from "react";
import Button from "../lib/Button";
import Blockies from "react-blockies";
import { format } from "date-fns";
import {
  IconFilePlus,
  IconPlayerPlay,
  IconTool,
  IconTrash,
  IconClock,
} from "@tabler/icons";

type Props = {
  blueprints: Types.Blueprint[];
  instances: Types.BlueprintInstance[];
  createBlueprint: () => void;
  editBlueprint: (id: string) => void;
  deleteBlueprint: (id: string) => void;
  createInstance: (blueprintId: string) => void;
  selectInstance: (id: string) => void;
  deleteInstance: (id: string) => void;
};

export default function LibraryPanel(props: Props) {
  const {
    blueprints,
    instances,
    editBlueprint,
    createBlueprint,
    deleteBlueprint,
    createInstance,
    selectInstance,
    deleteInstance,
  } = props;

  return (
    <div className="flex flex-grow">
      {instances.length ? (
        <div className="flex-shrink-0 w-80 px-4 py-2 border-r">
          {instances
            .sort(
              (a, b) =>
                new Date(b.updatedAt).valueOf() -
                new Date(a.updatedAt).valueOf()
            )
            .map((i) => (
              <InstanceEntry
                key={i.id}
                {...i}
                selectInstance={() => selectInstance(i.id)}
                deleteInstance={() => deleteInstance(i.id)}
              />
            ))}
        </div>
      ) : null}
      <div className="w-full px-4 py-2">
        {blueprints.length ? (
          <div className="mx-auto my-16 max-w-screen-xl">
            <div className="mb-8">
              <Button
                Icon={IconFilePlus}
                label="Create new guide"
                onClick={createBlueprint}
              />
            </div>
            <div className="grid grid-cols-4 gap-4">
              {blueprints
                .sort(
                  (a, b) =>
                    new Date(b.createdAt).valueOf() -
                    new Date(a.createdAt).valueOf()
                )
                .map((b) => (
                  <BlueprintEntry
                    key={b.id}
                    {...b}
                    editBlueprint={() => editBlueprint(b.id)}
                    deleteBlueprint={() => deleteBlueprint(b.id)}
                    createInstance={() => createInstance(b.id)}
                  />
                ))}
            </div>
          </div>
        ) : (
          <div className="mx-auto my-16 prose dark:text-gray-100 text-center">
            <h2 className="dark:text-gray-100">
              You don't have any guides yet.
            </h2>
            <div className="flex justify-center">
              <Button
                Icon={IconFilePlus}
                label="Create one"
                onClick={createBlueprint}
              />
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

function BlueprintEntry(
  props: Types.Blueprint & {
    editBlueprint: () => void;
    deleteBlueprint: () => void;
    createInstance: () => void;
  }
) {
  const { name, steps, editBlueprint, deleteBlueprint, createInstance } = props;

  return (
    <div className="border">
      <div className="px-4 py-2 prose">
        <h3 className="dark:text-gray-100">
          {name ? name : "Unnamed guide"}
          <span className="ml-1 whitespace-nowrap">({steps.length} steps)</span>
        </h3>
      </div>
      <div className="bg-gray-900 dark:bg-gray-100 grid grid-cols-4">
        <Button
          Icon={IconPlayerPlay}
          className="bg-lime-400 dark:bg-lime-600 col-span-2 justify-center"
          onClick={createInstance}
        />
        <Button
          Icon={IconTool}
          className="bg-yellow-400 dark:bg-yellow-600 justify-center"
          onClick={editBlueprint}
        />
        <Button
          Icon={IconTrash}
          className="bg-rose-400 dark:bg-rose-600 justify-center"
          onClick={deleteBlueprint}
        />
      </div>
    </div>
  );
}

function InstanceEntry(
  props: Types.BlueprintInstance & {
    selectInstance: () => void;
    deleteInstance: () => void;
  }
) {
  const { id, name, steps, updatedAt, selectInstance, deleteInstance } = props;

  const progress = steps.length
    ? steps.reduce((accu, curr) => {
      return (accu += curr.status === "completed" ? 1 : 0);
    }, 0) / steps.length
    : 1;

  return (
    <div className="border mb-4">
      <div className="flex items-center">
        <Blockies seed={id} />
        <div className="px-2 prose">
          <h4>
            {name ? name : "Unnamed guide"}
            <span className="ml-1 whitespace-nowrap">
              ({(100 * progress).toFixed(0)}%)
            </span>
          </h4>
        </div>
      </div>
      <div className="border-t flex">
        <Button
          Icon={IconPlayerPlay}
          className="bg-lime-400 dark:bg-lime-600"
          onClick={selectInstance}
        />
        <Button
          Icon={IconTrash}
          className="bg-rose-400 dark:bg-rose-600"
          onClick={deleteInstance}
        />
        <div className="ml-4 flex items-center text-sm">
          <IconClock size={16} />
          <div className="ml-1">
            {format(new Date(updatedAt), "dd/MM/yyyy HH:mm:ss")}
          </div>
        </div>
      </div>
    </div>
  );
}
